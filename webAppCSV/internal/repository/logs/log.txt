time="2025-05-13T15:04:59+06:00" level=error msg="Add product error: ExecQuery: could not match actual sql: \"INSERT INTO \"assets\" (name, price) VALUES ($1, $2)\" with expected regexp \"INSERT INTO \"assets\" (name, price) VALUES ($1, $2)\"" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:04:59+06:00" level=error msg="Something wrong with transaction: ExecQuery: could not match actual sql: \"INSERT INTO \"assets\" (name, price) VALUES ($1, $2)\" with expected regexp \"INSERT INTO \"assets\" (name, price) VALUES ($1, $2)\"" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:05:44+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)', arguments do not match: expected 1, but got 2 arguments" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:05:44+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)', arguments do not match: expected 1, but got 2 arguments" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:06:13+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)', arguments do not match: expected 1, but got 2 arguments" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:06:13+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)', arguments do not match: expected 1, but got 2 arguments" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:07:50+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)', arguments do not match: expected 1, but got 2 arguments" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:07:50+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)', arguments do not match: expected 1, but got 2 arguments" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:08:38+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:08:38+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:09:27+06:00" level=error msg="Add product error: ExecQuery: could not match actual sql: \"INSERT INTO \"assets\" (name, price) VALUES ($1, $2)\" with expected regexp \"INSERT INTO \\\"assets\\\" (name, price) VALUES ($1, $2)\"" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:09:27+06:00" level=error msg="Something wrong with transaction: ExecQuery: could not match actual sql: \"INSERT INTO \"assets\" (name, price) VALUES ($1, $2)\" with expected regexp \"INSERT INTO \\\"assets\\\" (name, price) VALUES ($1, $2)\"" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:09:50+06:00" level=error msg="Add product error: ExecQuery: could not match actual sql: \"INSERT INTO \"assets\" (name, price) VALUES ($1, $2)\" with expected regexp \"INSERT INTO \\\"assets\\\" (name, price) VALUES ($1, $2)\"" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:09:50+06:00" level=error msg="Something wrong with transaction: ExecQuery: could not match actual sql: \"INSERT INTO \"assets\" (name, price) VALUES ($1, $2)\" with expected regexp \"INSERT INTO \\\"assets\\\" (name, price) VALUES ($1, $2)\"" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:11:10+06:00" level=error msg="Add product error: ExecQuery: could not match actual sql: \"INSERT INTO \"assets\" (name, price) VALUES ($1, $2)\" with expected regexp \"INSERT INTO \"assets\" (name, price) VALUES ($1, $2)\"" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:11:10+06:00" level=error msg="Something wrong with transaction: ExecQuery: could not match actual sql: \"INSERT INTO \"assets\" (name, price) VALUES ($1, $2)\" with expected regexp \"INSERT INTO \"assets\" (name, price) VALUES ($1, $2)\"" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:24:06+06:00" level=error msg="Add product error: ExecQuery: error parsing regexp: invalid escape sequence: `\\I`" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:24:06+06:00" level=error msg="Something wrong with transaction: ExecQuery: error parsing regexp: invalid escape sequence: `\\I`" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:24:15+06:00" level=error msg="Add product error: ExecQuery: could not match actual sql: \"INSERT INTO \"assets\" (name, price) VALUES ($1, $2)\" with expected regexp \"INSERT INTO \\\"assets\\\" (name, price) VALUES (\\$1, \\$2)\"" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:24:15+06:00" level=error msg="Something wrong with transaction: ExecQuery: could not match actual sql: \"INSERT INTO \"assets\" (name, price) VALUES ($1, $2)\" with expected regexp \"INSERT INTO \\\"assets\\\" (name, price) VALUES (\\$1, \\$2)\"" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:24:29+06:00" level=error msg="Add product error: ExecQuery: could not match actual sql: \"INSERT INTO \"assets\" (name, price) VALUES ($1, $2)\" with expected regexp \"INSERT INTO \\\"assets\\\" (name, price) VALUES ($1, $2)\"" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:24:29+06:00" level=error msg="Something wrong with transaction: ExecQuery: could not match actual sql: \"INSERT INTO \"assets\" (name, price) VALUES ($1, $2)\" with expected regexp \"INSERT INTO \\\"assets\\\" (name, price) VALUES ($1, $2)\"" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:27:03+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:27:03+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:42:42+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:42:42+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:43:44+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:43:44+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:43:44+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:43:44+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:45:50+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:45:50+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:45:50+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:45:50+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:45:50+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:45:50+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:56:25+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:56:25+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:56:25+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:56:25+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T15:56:25+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T15:56:25+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:16:04+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:16:04+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:16:04+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:16:04+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:16:04+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:16:04+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:19:17+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:19:17+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:19:17+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:19:17+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:19:17+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:19:17+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:19:59+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:19:59+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:19:59+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:19:59+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:19:59+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:19:59+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:21:10+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:21:10+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:21:10+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:21:10+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:21:10+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:21:10+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:23:51+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:23:51+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:23:51+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:23:51+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:23:51+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:23:51+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:25:00+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:25:00+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:25:00+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:25:00+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:25:00+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:25:00+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:26:43+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:26:43+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:26:43+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:26:43+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:26:43+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:26:43+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:27:40+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:27:40+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:27:40+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:27:40+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:27:40+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:27:40+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:27:50+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:27:50+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:27:50+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:27:50+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:27:50+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:27:50+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:38:44+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:38:44+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:38:44+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:38:44+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:38:44+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:38:44+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:38:44+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-13T16:38:44+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-13T16:38:44+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50\n  - should return error: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-13T16:38:44+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50\n  - should return error: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-13T16:40:02+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:40:02+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:40:02+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:40:02+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:40:02+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:40:02+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:40:02+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-13T16:40:02+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-13T16:40:02+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50\n  - should return error: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-13T16:40:02+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50\n  - should return error: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-13T16:41:54+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:41:54+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:41:54+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:41:54+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:41:54+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-13T16:41:54+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-13T16:41:54+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-13T16:41:54+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-13T16:41:54+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:00:19+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:00:19+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:00:19+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:00:19+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:00:19+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:00:19+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:00:19+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:00:19+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:00:19+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:00:19+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:00:19+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:17:48+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:17:48+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:17:48+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:17:48+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:17:48+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:17:48+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:17:48+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:17:48+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:17:48+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:17:48+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:17:48+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:17:48+06:00" level=error msg="Delete product error: ExecQuery: could not match actual sql: \"DELETE FROM \"assets\" WHERE \"id\"=$1\" with expected regexp \"DELETE FROM \"assets\" WHERE \"id\"=$1\"" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T09:17:48+06:00" level=error msg="Something wrong with trunsaction: ExecQuery: could not match actual sql: \"DELETE FROM \"assets\" WHERE \"id\"=$1\" with expected regexp \"DELETE FROM \"assets\" WHERE \"id\"=$1\"" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T09:18:04+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:18:04+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:18:04+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:18:04+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:18:04+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:18:04+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:18:04+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:18:04+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:18:04+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:18:04+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:18:04+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:22:04+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:22:04+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:22:04+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:22:04+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:22:04+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:22:04+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:22:04+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:22:04+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:22:04+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:22:04+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:22:04+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:22:04+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T09:22:04+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T09:22:18+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:22:18+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:22:18+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:22:18+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:22:18+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:22:18+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:22:18+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:22:18+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:22:18+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:22:18+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:22:18+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:22:18+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T09:22:18+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T09:26:41+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:26:41+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:26:41+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:26:41+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:26:41+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:26:41+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:26:41+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:26:41+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:26:41+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:26:41+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:26:41+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:26:41+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T09:26:41+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T09:26:41+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 0" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T09:26:41+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 0" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T09:27:48+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:27:48+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:27:48+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:27:48+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:27:48+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:27:48+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:27:48+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:27:48+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:27:48+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:27:48+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:27:48+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:27:48+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T09:27:48+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T09:27:48+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 0" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T09:27:48+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 0" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T09:28:20+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:28:20+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:28:20+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:28:20+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:28:20+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:28:20+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:28:20+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:28:20+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:28:20+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:28:20+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:28:20+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:28:20+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T09:28:20+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T09:28:20+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T09:28:20+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T09:28:43+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:28:43+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:28:43+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:28:43+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:28:43+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:28:43+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:28:43+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:28:43+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:28:43+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:28:43+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:28:43+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:28:43+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T09:28:43+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T09:28:43+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T09:28:43+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T09:50:37+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:50:37+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:50:37+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:50:37+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:50:37+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T09:50:37+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T09:50:37+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:50:37+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:50:37+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:50:37+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T09:50:37+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T09:50:37+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T09:50:37+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T09:50:37+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T09:50:37+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T09:50:37+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T10:16:25+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:16:25+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:16:25+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:16:25+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:16:25+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:16:25+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:16:25+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T10:16:25+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:16:25+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:16:25+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T10:16:25+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:16:25+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T10:16:25+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T10:16:25+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T10:16:25+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T10:16:25+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T10:16:25+06:00" level=error msg="Delete product error: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - \n    1 - 0\n    2 - 0" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T10:16:25+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - \n    1 - 0\n    2 - 0" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T10:17:12+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:17:12+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:17:12+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:17:12+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:17:12+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:17:12+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:17:12+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T10:17:12+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:17:12+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:17:12+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T10:17:12+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:17:12+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T10:17:12+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T10:17:12+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T10:17:12+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T10:17:12+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T10:17:12+06:00" level=error msg="Delete product error: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T10:17:12+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T10:18:57+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:18:57+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:18:57+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:18:57+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:18:57+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:18:57+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:18:57+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T10:18:57+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:18:57+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:18:57+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T10:18:57+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:18:57+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T10:18:57+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T10:18:57+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T10:18:57+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T10:18:57+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T10:45:15+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:45:15+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:45:15+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:45:15+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:45:15+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:45:15+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:45:15+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T10:45:15+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:45:15+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:45:15+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T10:45:15+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:45:15+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T10:45:15+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T10:45:15+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T10:45:15+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T10:45:15+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T10:45:15+06:00" level=error msg="Delete product error: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T10:45:15+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T10:45:57+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:45:57+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:45:57+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:45:57+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:45:57+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:45:57+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:45:57+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T10:45:57+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:45:57+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:45:57+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T10:45:57+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:45:57+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T10:45:57+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T10:45:57+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T10:45:57+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T10:45:57+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T10:45:57+06:00" level=error msg="Delete product error: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T10:45:57+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T10:58:42+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:58:42+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:58:42+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:58:42+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:58:42+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T10:58:42+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T10:58:42+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T10:58:42+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:58:42+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:58:42+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T10:58:42+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T10:58:42+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T10:58:42+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T10:58:42+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T10:58:42+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T10:58:42+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T10:58:42+06:00" level=error msg="Delete product error: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T10:58:42+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T11:13:41+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:13:41+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:13:41+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:13:41+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:13:41+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:13:41+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:13:41+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T11:13:41+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:13:41+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:13:41+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T11:13:41+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:13:41+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T11:13:41+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T11:13:41+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T11:13:41+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T11:13:41+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T11:13:41+06:00" level=error msg="Delete product error: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T11:13:41+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T11:13:41+06:00" level=error msg="Delete product error: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T11:13:41+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T11:27:31+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:27:31+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:27:31+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:27:31+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:27:31+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:27:31+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:27:31+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T11:27:31+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:27:31+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:27:31+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T11:27:31+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:27:31+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T11:27:31+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T11:27:31+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T11:27:31+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T11:27:31+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T11:27:31+06:00" level=error msg="Delete product error: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T11:27:31+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T11:27:31+06:00" level=error msg="Delete product error: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T11:27:31+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T11:27:31+06:00" level=error msg="Select all error: Query: could not match actual sql: \"SELECT * FROM \"assets\"\" with expected regexp \"SELECT * FROM \\\"assets\\\"\"" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T11:27:31+06:00" level=error msg="Something wrong with trunsaction: Query: could not match actual sql: \"SELECT * FROM \"assets\"\" with expected regexp \"SELECT * FROM \\\"assets\\\"\"" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T11:30:32+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:30:32+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:30:32+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:30:32+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:30:32+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:30:32+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:30:32+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T11:30:32+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:30:32+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:30:32+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T11:30:32+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:30:32+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T11:30:32+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T11:30:32+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T11:30:32+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T11:30:32+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T11:30:32+06:00" level=error msg="Delete product error: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T11:30:32+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T11:30:32+06:00" level=error msg="Delete product error: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T11:30:32+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T11:30:32+06:00" level=error msg="Select all error: Query: could not match actual sql: \"SELECT * FROM \"assets\"\" with expected regexp \"SELECT * FROM \\\"assets\\\"\"" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T11:30:32+06:00" level=error msg="Something wrong with trunsaction: Query: could not match actual sql: \"SELECT * FROM \"assets\"\" with expected regexp \"SELECT * FROM \\\"assets\\\"\"" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T11:31:42+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:31:42+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:31:42+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:31:42+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:31:42+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:31:42+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:31:42+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T11:31:42+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:31:42+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:31:42+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T11:31:42+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:31:42+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T11:31:42+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T11:31:42+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T11:31:42+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T11:31:42+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T11:31:42+06:00" level=error msg="Delete product error: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T11:31:42+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T11:31:42+06:00" level=error msg="Delete product error: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T11:31:42+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T11:34:09+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:34:09+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:34:09+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:34:09+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:34:09+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:34:09+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:34:09+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T11:34:09+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:34:09+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:34:09+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T11:34:09+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:34:09+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T11:34:09+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T11:34:09+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T11:34:09+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T11:34:09+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T11:34:09+06:00" level=error msg="Delete product error: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T11:34:09+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T11:34:09+06:00" level=error msg="Delete product error: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T11:34:09+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T11:34:09+06:00" level=error msg="Select all error: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T11:34:09+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T11:43:50+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:43:50+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:43:50+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:43:50+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:43:50+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:43:50+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:43:50+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T11:43:50+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:43:50+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:43:50+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T11:43:50+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:43:50+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T11:43:50+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T11:43:50+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T11:43:50+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T11:43:50+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T11:43:50+06:00" level=error msg="Delete product error: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T11:43:50+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T11:43:50+06:00" level=error msg="Delete product error: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T11:43:50+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T11:43:50+06:00" level=error msg="Select all error: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T11:43:50+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T11:43:50+06:00" level=error msg="Select all error: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T11:43:50+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T11:48:07+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:48:07+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:48:07+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:48:07+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:48:07+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:48:07+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:48:07+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T11:48:07+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:48:07+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:48:07+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T11:48:07+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:48:07+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T11:48:07+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T11:48:07+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T11:48:07+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T11:48:07+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T11:48:07+06:00" level=error msg="Delete product error: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T11:48:07+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T11:48:07+06:00" level=error msg="Delete product error: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T11:48:07+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T11:48:07+06:00" level=error msg="Select all error: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T11:48:07+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T11:48:07+06:00" level=error msg="Select all error: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T11:48:07+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T11:48:07+06:00" level=error msg="Can't get product from DB: sql: Scan error on column index 2, name \"price\": can't convert sdsd to decimal" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:169"
time="2025-05-14T11:48:07+06:00" level=error msg="Something wrong with trunsaction: sql: Scan error on column index 2, name \"price\": can't convert sdsd to decimal" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T11:50:57+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:50:57+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:50:57+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:50:57+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:50:57+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T11:50:57+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T11:50:57+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T11:50:57+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:50:57+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:50:57+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T11:50:57+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T11:50:57+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T11:50:57+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T11:50:57+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T11:50:57+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T11:50:57+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T11:50:57+06:00" level=error msg="Delete product error: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T11:50:57+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T11:50:57+06:00" level=error msg="Delete product error: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T11:50:57+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T11:50:57+06:00" level=error msg="Select all error: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T11:50:57+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T11:50:57+06:00" level=error msg="Select all error: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T11:50:57+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T11:50:57+06:00" level=error msg="Select all error: productNotFound" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T11:50:57+06:00" level=error msg="Something wrong with trunsaction: productNotFound" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T13:00:27+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T13:00:27+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T13:00:27+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T13:00:27+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T13:00:27+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T13:00:27+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T13:00:27+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T13:00:27+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T13:00:27+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T13:00:27+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T13:00:27+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T13:00:27+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T13:00:27+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T13:00:27+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T13:00:27+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T13:00:27+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T13:00:27+06:00" level=error msg="Delete product error: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T13:00:27+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T13:00:27+06:00" level=error msg="Delete product error: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T13:00:27+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T13:00:27+06:00" level=error msg="Select all error: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T13:00:27+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T13:00:27+06:00" level=error msg="Select all error: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T13:00:27+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T13:00:27+06:00" level=error msg="Select all error: productNotFound" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T13:00:27+06:00" level=error msg="Something wrong with trunsaction: productNotFound" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T13:03:40+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T13:03:40+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T13:03:40+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T13:03:40+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T13:03:40+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T13:03:40+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T13:03:40+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T13:03:40+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T13:03:40+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T13:03:40+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T13:03:40+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T13:03:40+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T13:03:40+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T13:03:40+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T13:03:40+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T13:03:40+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T13:03:40+06:00" level=error msg="Delete product error: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T13:03:40+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T13:03:40+06:00" level=error msg="Delete product error: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T13:03:40+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T13:03:40+06:00" level=error msg="Select all error: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T13:03:40+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T13:03:40+06:00" level=error msg="Select all error: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T13:03:40+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T13:03:40+06:00" level=error msg="Select all error: productNotFound" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T13:03:40+06:00" level=error msg="Something wrong with trunsaction: productNotFound" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T13:03:40+06:00" level=error msg="Delete products error: call to ExecQuery 'DELETE FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteAllProducts()" file="product.go:193"
time="2025-05-14T13:03:40+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteAllProducts.func1()" file="product.go:186"
time="2025-05-14T13:04:37+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T13:04:37+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T13:04:37+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T13:04:37+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T13:04:37+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T13:04:37+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T13:04:37+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T13:04:37+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T13:04:37+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T13:04:37+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T13:04:37+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T13:04:37+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T13:04:37+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T13:04:37+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T13:04:37+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T13:04:37+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T13:04:37+06:00" level=error msg="Delete product error: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T13:04:37+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T13:04:37+06:00" level=error msg="Delete product error: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T13:04:37+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T13:04:37+06:00" level=error msg="Select all error: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T13:04:37+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T13:04:37+06:00" level=error msg="Select all error: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T13:04:37+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T13:04:37+06:00" level=error msg="Select all error: productNotFound" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T13:04:37+06:00" level=error msg="Something wrong with trunsaction: productNotFound" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T13:04:37+06:00" level=error msg="Delete products error: call to ExecQuery 'DELETE FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteAllProducts()" file="product.go:193"
time="2025-05-14T13:04:37+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteAllProducts.func1()" file="product.go:186"
time="2025-05-14T13:04:37+06:00" level=error msg="Delete products error: ExecQuery 'DELETE FROM \"assets\"' with args [], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \"assets\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).DeleteAllProducts()" file="product.go:193"
time="2025-05-14T13:04:37+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\"' with args [], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \"assets\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).DeleteAllProducts.func1()" file="product.go:186"
time="2025-05-14T13:04:42+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T13:04:42+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T13:04:42+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T13:04:42+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T13:04:42+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T13:04:42+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T13:04:42+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T13:04:42+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T13:04:42+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T13:04:42+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T13:04:42+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T13:04:42+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T13:04:42+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T13:04:42+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T13:04:42+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T13:04:42+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T13:04:42+06:00" level=error msg="Delete product error: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T13:04:42+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T13:04:42+06:00" level=error msg="Delete product error: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T13:04:42+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T13:04:42+06:00" level=error msg="Select all error: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T13:04:42+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T13:04:42+06:00" level=error msg="Select all error: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T13:04:42+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T13:04:42+06:00" level=error msg="Select all error: productNotFound" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T13:04:42+06:00" level=error msg="Something wrong with trunsaction: productNotFound" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T13:04:42+06:00" level=error msg="Delete products error: call to ExecQuery 'DELETE FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteAllProducts()" file="product.go:193"
time="2025-05-14T13:04:42+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteAllProducts.func1()" file="product.go:186"
time="2025-05-14T13:04:42+06:00" level=error msg="Delete products error: ExecQuery 'DELETE FROM \"assets\"' with args [], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \"assets\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).DeleteAllProducts()" file="product.go:193"
time="2025-05-14T13:04:42+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\"' with args [], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \"assets\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).DeleteAllProducts.func1()" file="product.go:186"
time="2025-05-14T13:05:42+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T13:05:42+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T13:05:42+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T13:05:42+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T13:05:42+06:00" level=error msg="Add product error: productExists" func="webApp/internal/(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-14T13:05:42+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-14T13:05:42+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T13:05:42+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T13:05:42+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T13:05:42+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-14T13:05:42+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-14T13:05:42+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T13:05:42+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T13:05:42+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-14T13:05:42+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-14T13:05:42+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-14T13:05:42+06:00" level=error msg="Delete product error: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T13:05:42+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T13:05:42+06:00" level=error msg="Delete product error: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-14T13:05:42+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-14T13:05:42+06:00" level=error msg="Select all error: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T13:05:42+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T13:05:42+06:00" level=error msg="Select all error: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T13:05:42+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T13:05:42+06:00" level=error msg="Select all error: productNotFound" func="webApp/internal/(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-14T13:05:42+06:00" level=error msg="Something wrong with trunsaction: productNotFound" func="webApp/internal/(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-14T13:05:42+06:00" level=error msg="Delete products error: call to ExecQuery 'DELETE FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteAllProducts()" file="product.go:193"
time="2025-05-14T13:05:42+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/(*ProductRepo).DeleteAllProducts.func1()" file="product.go:186"
time="2025-05-14T13:05:42+06:00" level=error msg="Delete products error: ExecQuery 'DELETE FROM \"assets\"' with args [], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \"assets\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).DeleteAllProducts()" file="product.go:193"
time="2025-05-14T13:05:42+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\"' with args [], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \"assets\"'\n  - is without arguments" func="webApp/internal/(*ProductRepo).DeleteAllProducts.func1()" file="product.go:186"
time="2025-05-14T15:14:25+06:00" level=error msg="Can't load environment: open .env: no such file or directory" func="webApp/internal/repository.ConnectPostgres()" file="connect.go:42"
time="2025-05-14T15:16:54+06:00" level=error msg="Can't load environment: open .env: no such file or directory" func="webApp/internal/repository.ConnectPostgres()" file="connect.go:42"
time="2025-05-14T15:18:23+06:00" level=error msg="Can't load environment: open .env: no such file or directory" func="webApp/internal/repository.ConnectPostgres()" file="connect.go:42"
time="2025-05-14T15:18:30+06:00" level=error msg="Can't load environment: open .env: no such file or directory" func="webApp/internal/repository.ConnectPostgres()" file="connect.go:42"
time="2025-05-19T15:19:39+06:00" level=error msg="Add product error: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/repository.(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-19T15:19:39+06:00" level=error msg="Something wrong with transaction: call to ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/repository.(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-19T15:19:39+06:00" level=error msg="Add product error: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/repository.(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-19T15:19:39+06:00" level=error msg="Something wrong with transaction: ExecQuery 'INSERT INTO \"assets\" (name, price) VALUES ($1, $2)' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'INSERT INTO \\\"assets\\\" \\(name, price\\) VALUES \\(\\$1, \\$2\\)'\n  - is with arguments:\n    0 - name\n    1 - 50" func="webApp/internal/repository.(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-19T15:19:39+06:00" level=error msg="Add product error: productExists" func="webApp/internal/repository.(*ProductRepo).AddProduct()" file="product.go:41"
time="2025-05-19T15:19:39+06:00" level=error msg="Something wrong with transaction: productExists" func="webApp/internal/repository.(*ProductRepo).AddProduct.func1()" file="product.go:34"
time="2025-05-19T15:19:39+06:00" level=error msg="Can't get product from DB: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/repository.(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-19T15:19:39+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/repository.(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-19T15:19:39+06:00" level=error msg="Something wrong with trunsaction: sql: no rows in result set" func="webApp/internal/repository.(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-19T15:19:39+06:00" level=error msg="Can't get product from DB: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/repository.(*ProductRepo).GetProduct()" file="product.go:76"
time="2025-05-19T15:19:39+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT \"id\", \"name\", \"price\" WHERE \"id\" = $1', arguments do not match: argument 0 expected [int64 - 1] does not match actual [int64 - 0]" func="webApp/internal/repository.(*ProductRepo).GetProduct.func1()" file="product.go:65"
time="2025-05-19T15:19:39+06:00" level=error msg="Delete product error: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/repository.(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-19T15:19:39+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/repository.(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-19T15:19:39+06:00" level=error msg="Delete product error: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/repository.(*ProductRepo).DeleteProduct()" file="product.go:98"
time="2025-05-19T15:19:39+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\" WHERE \"id\"=$1' with args [{Name: Ordinal:1 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \\\"assets\\\" WHERE \\\"id\\\"=\\$1'\n  - is with arguments:\n    0 - 1" func="webApp/internal/repository.(*ProductRepo).DeleteProduct.func1()" file="product.go:91"
time="2025-05-19T15:19:39+06:00" level=error msg="Transaction not started: call to database transaction Begin, was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/repository.(*ProductRepo).DeleteProduct()" file="product.go:85"
time="2025-05-19T15:19:39+06:00" level=error msg="Delete product error: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/repository.(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-19T15:19:39+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:} {Name: Ordinal:2 Value:0} {Name: Ordinal:3 Value:0}], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/repository.(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-19T15:19:39+06:00" level=error msg="Delete product error: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/repository.(*ProductRepo).UpdateProduct()" file="product.go:127"
time="2025-05-19T15:19:39+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'UPDATE \"assets\" SET \"name\"=$1, \"price\"=$2 WHERE \"id\"=$3' with args [{Name: Ordinal:1 Value:name} {Name: Ordinal:2 Value:50} {Name: Ordinal:3 Value:1}], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'UPDATE \\\"assets\\\" SET \\\"name\\\"=\\$1, \\\"price\\\"=\\$2 WHERE \\\"id\\\"=\\$3'\n  - is with arguments:\n    0 - name\n    1 - 50\n    2 - 1" func="webApp/internal/repository.(*ProductRepo).UpdateProduct.func1()" file="product.go:120"
time="2025-05-19T15:19:39+06:00" level=error msg="Select all error: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/repository.(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-19T15:19:39+06:00" level=error msg="Something wrong with trunsaction: call to Query 'SELECT * FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/repository.(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-19T15:19:39+06:00" level=error msg="Select all error: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/repository.(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-19T15:19:39+06:00" level=error msg="Something wrong with trunsaction: Query 'SELECT * FROM \"assets\"' with args [], must return a database/sql/driver.Rows, but it was not set for expectation *sqlmock.ExpectedQuery as ExpectedQuery => expecting Query, QueryContext or QueryRow which:\n  - matches sql: 'SELECT \\* FROM \\\"assets\\\"'\n  - is without arguments" func="webApp/internal/repository.(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-19T15:19:39+06:00" level=error msg="Select all error: productNotFound" func="webApp/internal/repository.(*ProductRepo).GetAllProducts()" file="product.go:158"
time="2025-05-19T15:19:39+06:00" level=error msg="Something wrong with trunsaction: productNotFound" func="webApp/internal/repository.(*ProductRepo).GetAllProducts.func1()" file="product.go:150"
time="2025-05-19T15:19:39+06:00" level=error msg="Delete products error: call to ExecQuery 'DELETE FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/repository.(*ProductRepo).DeleteAllProducts()" file="product.go:193"
time="2025-05-19T15:19:39+06:00" level=error msg="Something wrong with trunsaction: call to ExecQuery 'DELETE FROM \"assets\"' with args [], was not expected, next expectation is: ExpectedRollback => expecting transaction Rollback" func="webApp/internal/repository.(*ProductRepo).DeleteAllProducts.func1()" file="product.go:186"
time="2025-05-19T15:19:39+06:00" level=error msg="Delete products error: ExecQuery 'DELETE FROM \"assets\"' with args [], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \"assets\"'\n  - is without arguments" func="webApp/internal/repository.(*ProductRepo).DeleteAllProducts()" file="product.go:193"
time="2025-05-19T15:19:39+06:00" level=error msg="Something wrong with trunsaction: ExecQuery 'DELETE FROM \"assets\"' with args [], must return a database/sql/driver.Result, but it was not set for expectation *sqlmock.ExpectedExec as ExpectedExec => expecting Exec or ExecContext which:\n  - matches sql: 'DELETE FROM \"assets\"'\n  - is without arguments" func="webApp/internal/repository.(*ProductRepo).DeleteAllProducts.func1()" file="product.go:186"
