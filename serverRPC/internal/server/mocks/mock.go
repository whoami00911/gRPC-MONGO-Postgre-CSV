// Code generated by MockGen. DO NOT EDIT.
// Source: sortService.go

// Package mock_server is a generated GoMock package.
package mock_server

import (
	context "context"
	domain "gRPC-server/internal/domain"
	grpcPb "gRPC-server/pkg/parseCSV/grpcPb"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSorting is a mock of Sorting interface.
type MockSorting struct {
	ctrl     *gomock.Controller
	recorder *MockSortingMockRecorder
}

// MockSortingMockRecorder is the mock recorder for MockSorting.
type MockSortingMockRecorder struct {
	mock *MockSorting
}

// NewMockSorting creates a new mock instance.
func NewMockSorting(ctrl *gomock.Controller) *MockSorting {
	mock := &MockSorting{ctrl: ctrl}
	mock.recorder = &MockSortingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSorting) EXPECT() *MockSortingMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockSorting) Fetch(ctx context.Context, req *grpcPb.FetchRequest) (domain.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, req)
	ret0, _ := ret[0].(domain.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockSortingMockRecorder) Fetch(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockSorting)(nil).Fetch), ctx, req)
}

// List mocks base method.
func (m *MockSorting) List(ctx context.Context, req *grpcPb.ListRequest) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, req)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSortingMockRecorder) List(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSorting)(nil).List), ctx, req)
}
