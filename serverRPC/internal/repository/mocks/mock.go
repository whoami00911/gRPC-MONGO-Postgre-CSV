// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	domain "gRPC-server/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSorting is a mock of Sorting interface.
type MockSorting struct {
	ctrl     *gomock.Controller
	recorder *MockSortingMockRecorder
}

// MockSortingMockRecorder is the mock recorder for MockSorting.
type MockSortingMockRecorder struct {
	mock *MockSorting
}

// NewMockSorting creates a new mock instance.
func NewMockSorting(ctrl *gomock.Controller) *MockSorting {
	mock := &MockSorting{ctrl: ctrl}
	mock.recorder = &MockSortingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSorting) EXPECT() *MockSortingMockRecorder {
	return m.recorder
}

// GetByName mocks base method.
func (m *MockSorting) GetByName(ctx context.Context, product domain.Product) (domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, product)
	ret0, _ := ret[0].(domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockSortingMockRecorder) GetByName(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockSorting)(nil).GetByName), ctx, product)
}

// Insert mocks base method.
func (m *MockSorting) Insert(ctx context.Context, product []domain.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSortingMockRecorder) Insert(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSorting)(nil).Insert), ctx, product)
}

// List mocks base method.
func (m *MockSorting) List(ctx context.Context, sortParams domain.SortParams) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, sortParams)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSortingMockRecorder) List(ctx, sortParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSorting)(nil).List), ctx, sortParams)
}

// UpdateProduct mocks base method.
func (m *MockSorting) UpdateProduct(ctx context.Context, product domain.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockSortingMockRecorder) UpdateProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockSorting)(nil).UpdateProduct), ctx, product)
}
