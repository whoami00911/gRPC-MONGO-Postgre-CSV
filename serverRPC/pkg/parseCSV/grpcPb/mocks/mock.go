// Code generated by MockGen. DO NOT EDIT.
// Source: proto_grpc.pb.go

// Package mock_grpcPb is a generated GoMock package.
package mock_grpcPb

import (
	context "context"
	grpcPb "gRPC-server/pkg/parseCSV/grpcPb"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSortServiceClient is a mock of SortServiceClient interface.
type MockSortServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSortServiceClientMockRecorder
}

// MockSortServiceClientMockRecorder is the mock recorder for MockSortServiceClient.
type MockSortServiceClientMockRecorder struct {
	mock *MockSortServiceClient
}

// NewMockSortServiceClient creates a new mock instance.
func NewMockSortServiceClient(ctrl *gomock.Controller) *MockSortServiceClient {
	mock := &MockSortServiceClient{ctrl: ctrl}
	mock.recorder = &MockSortServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSortServiceClient) EXPECT() *MockSortServiceClientMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockSortServiceClient) Fetch(ctx context.Context, in *grpcPb.FetchRequest, opts ...grpc.CallOption) (*grpcPb.FethResponce, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fetch", varargs...)
	ret0, _ := ret[0].(*grpcPb.FethResponce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockSortServiceClientMockRecorder) Fetch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockSortServiceClient)(nil).Fetch), varargs...)
}

// List mocks base method.
func (m *MockSortServiceClient) List(ctx context.Context, in *grpcPb.ListRequest, opts ...grpc.CallOption) (*grpcPb.ListResponce, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*grpcPb.ListResponce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSortServiceClientMockRecorder) List(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSortServiceClient)(nil).List), varargs...)
}

// MockSortServiceServer is a mock of SortServiceServer interface.
type MockSortServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSortServiceServerMockRecorder
}

// MockSortServiceServerMockRecorder is the mock recorder for MockSortServiceServer.
type MockSortServiceServerMockRecorder struct {
	mock *MockSortServiceServer
}

// NewMockSortServiceServer creates a new mock instance.
func NewMockSortServiceServer(ctrl *gomock.Controller) *MockSortServiceServer {
	mock := &MockSortServiceServer{ctrl: ctrl}
	mock.recorder = &MockSortServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSortServiceServer) EXPECT() *MockSortServiceServerMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockSortServiceServer) Fetch(arg0 context.Context, arg1 *grpcPb.FetchRequest) (*grpcPb.FethResponce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*grpcPb.FethResponce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockSortServiceServerMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockSortServiceServer)(nil).Fetch), arg0, arg1)
}

// List mocks base method.
func (m *MockSortServiceServer) List(arg0 context.Context, arg1 *grpcPb.ListRequest) (*grpcPb.ListResponce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*grpcPb.ListResponce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSortServiceServerMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSortServiceServer)(nil).List), arg0, arg1)
}

// mustEmbedUnimplementedSortServiceServer mocks base method.
func (m *MockSortServiceServer) mustEmbedUnimplementedSortServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSortServiceServer")
}

// mustEmbedUnimplementedSortServiceServer indicates an expected call of mustEmbedUnimplementedSortServiceServer.
func (mr *MockSortServiceServerMockRecorder) mustEmbedUnimplementedSortServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSortServiceServer", reflect.TypeOf((*MockSortServiceServer)(nil).mustEmbedUnimplementedSortServiceServer))
}

// MockUnsafeSortServiceServer is a mock of UnsafeSortServiceServer interface.
type MockUnsafeSortServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSortServiceServerMockRecorder
}

// MockUnsafeSortServiceServerMockRecorder is the mock recorder for MockUnsafeSortServiceServer.
type MockUnsafeSortServiceServerMockRecorder struct {
	mock *MockUnsafeSortServiceServer
}

// NewMockUnsafeSortServiceServer creates a new mock instance.
func NewMockUnsafeSortServiceServer(ctrl *gomock.Controller) *MockUnsafeSortServiceServer {
	mock := &MockUnsafeSortServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSortServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSortServiceServer) EXPECT() *MockUnsafeSortServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSortServiceServer mocks base method.
func (m *MockUnsafeSortServiceServer) mustEmbedUnimplementedSortServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSortServiceServer")
}

// mustEmbedUnimplementedSortServiceServer indicates an expected call of mustEmbedUnimplementedSortServiceServer.
func (mr *MockUnsafeSortServiceServerMockRecorder) mustEmbedUnimplementedSortServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSortServiceServer", reflect.TypeOf((*MockUnsafeSortServiceServer)(nil).mustEmbedUnimplementedSortServiceServer))
}
